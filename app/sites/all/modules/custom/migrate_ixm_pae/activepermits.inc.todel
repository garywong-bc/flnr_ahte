<?php

// Extend the Migration Class
class ActivePermitsMigration extends Migration {
  public function __construct() {

    parent::__construct();

 //The definition of the CSV File. Keys are integers. values are array(field name, description).
    $columns[0] = array('authorization_number', 'Id');
    $columns[1] = array('sections', 'Sections');
    $columns[2] = array('management_areas', 'Management Areas');
    $columns[3] = array('permit_type', 'Permit Type');
    $columns[4] = array('permittee', 'Permittee');
    $columns[5] = array('parks', 'Parks');
    $columns[6] = array('details', 'Details');
    $columns[7] = array('term', 'Term');
    $columns[8] = array('issue_date', 'Issue Date YYYY MM DD');
    $columns[9] = array('permit_document', 'Permit Document');

    //The Description of the import. This description is shown on the Migrate GUI
    $this->description = t('ePUPS-generated CSV file, Active Permits, every morning at 6:00am PST.');

    //The Source of the import
	if (variable_get('epups_xfer_env',PAE_SRC) == 'prod')
       $this->source = new MigrateSourceCSV('http://borage.idir.bcgov/doc/ams/activepermits.csv', $columns, array('header_rows' => 1));
	elseif (variable_get('epups_xfer_env',PAE_SRC) == 'test')
       $this->source = new MigrateSourceCSV('http://acorn.idir.bcgov/doc/test2/ams/activepermits.csv', $columns, array('header_rows' => 1));
	else /* (variable_get('epups_xfer_env',PAE_SRC) == 'local') */
       $this->source = new MigrateSourceCSV('./sites/default/files/epups/activepermits.csv', $columns, array('header_rows' => 1));
	   
    $this->map = new MigrateSQLMap(
      $this->machineName,
          array(
            'authorization_number' => array(
                'type' => 'varchar',
                'length' => 6,
                'not null' => TRUE,
                'description' => 'This is the authorization number from the CSV file',
               )
          ),
         MigrateDestinationNode::getKeySchema()
        );

    $this->destination = new MigrateDestinationNode('active_permit');

    $this->addFieldMapping('uid')
         ->defaultValue('1');

    $this->addFieldMapping('language')
         ->defaultValue('en');

    $this->addFieldMapping('title', 'authorization_number')
         ->description(t('This is the authorization number for the node'));

    $arguments = MigrateContentTaxonomyFieldHandler::arguments('name', 1);
    $this->addFieldMapping('field_sections', 'sections')
         ->description(t('The section for the Permit - This is a taxonomy term'))
         ->separator('|')
         ->arguments($arguments);

	/*
    $arguments = MigrateContentTaxonomyFieldHandler::arguments('td', 5);
    $this->addFieldMapping('field_mgmtarea', 'management_areas')
      ->description(t('The Management area - This is a taxonomy term sepearate by "|" in the CSV file'))
      ->separator('|')
      ->callbacks(array($this, 'ManagementArea'))
      ->arguments($arguments);
	 */
    $this->addFieldMapping('field_mgmtarea', 'management_areas')
         ->description(t('The Management area - This is a textfield; deprecated.'));	  
	  
    $arguments = MigrateContentTaxonomyFieldHandler::arguments('td', 6);
    $this->addFieldMapping('field_permittype', 'permit_type')
         ->description(t('The permit type - This is a taxonomy term separated by "|" in the CSV file'))
         ->callbacks(array($this, 'PermitType'))
         ->arguments($arguments);

    $this->addFieldMapping('field_proponent', 'permittee')
         ->description(t('The Name of the Active Permitee - This is a textfield'));

    $this->addFieldMapping('field_parks', 'parks')
         ->description(t('The park for the active permit - This is a textfield'));

    $this->addFieldMapping('field_details', 'details')
         ->description(t('The details of the active permit - This is a textfield'));

    $this->addFieldMapping('field_term', 'term')
         ->description(t('The term of the active permit - This is a textfield which contains time-span (ie: 10 years)'));

    $this->addFieldMapping('field_issuedate', 'issue_date')
         ->description(t('The issue date of the permit - This is a datefield coming in as "YYYY MM DD" '));

    $this->addFieldMapping('field_rationale')
         ->issueGroup(t('DNM'));

    $this->addFieldMapping('field_document')
         ->issueGroup(t('DNM'));

    $this->addFieldMapping('pathauto_perform_alias');

    $this->addUnmigratedDestinations(array('body','teaser', 'created', 'format','status','Section','Management Area', 'changed',
      'promote', 'sticky', 'revision', 'log','tnid', 'revision_uid','path'));
  }
  
// Prepare the row by changing the date into a unix timestamp format
    public function prepareRow($row) {
      $id = $row->authorization_number;
      // Add a space between commas on the parks field.
      // This is because the data coming in is 'squished'
      $parks = $row->parks;
      $row->parks = str_replace(',', ', ', $parks);

      $date_human = $row->issue_date;
      $date = str_replace(' ', '', $date_human);
      $row->issue_date = strtotime($date);

    // Define the log file that will be created
      $log_file = "./sites/default/files/epups/log/active-permits-log-" . date('Y-m-d') . ".txt";
      $handle = fopen($log_file, 'a') or die('Cannot open file:  '. $log_file);
      if (($id == "") || ($id == " ")) {
        drupal_set_message('An authorization number was not imported.', 'warning');
        $data = 'A field with no authorization number was NOT imported. Here are a few details from that record.' . "\n" . "Issue Date: " . $date_human . ", Permittee: " . $row->permittee . ' - Details: ' . $row->details . "\n";
        fwrite($handle, $data);
        return FALSE;
      }

    } // End of Prepare Row

	
    // This function is called after prepareRow
    // It is used to convert the Management Area ePUPs into PAE format
/*	
    public function ManagementArea($term) {
      foreach ($term as $key=>$area) {
        switch($area) {
          case ('Thompson Northern Forest'):
            $term[$key] = 336; // PAE - Adams River - Adams Lake
            break;
          case ('Atlin-Tatshenshini'):
            $term[$key] = 394;  // PAE - Atlin
            break;
          case ('Arrow'):
            $term[$key] = 337; // PAE - Arrow Lakes and Slocan Lake
            break;
          case ('Babine'):
            $term[$key] = 338; // PAE - Babine
            break;
          case ('Bella Coola'):
            $term[$key] = 339; // PAE - Bella Coola
            break;
          case ('Cape Scott'):
            $term[$key] = 340; // PAE - Cape Scott
            break;
          case ('Mid Coast'):
            $term[$key] = 341; // PAE - Central Coast
            break;
          case ('Clayoquot'):
            $term[$key] = 342; // PAE - Clayoquot
            break;
          case ('Cowichan'):
            $term[$key] = 343; // PAE - Cowichan
            break;
          case ('South Fraser'):
            $term[$key] = 344; // PAE - Cultus Lake-Skagit Valley
            break;
          case ('Peace South'):
            $term[$key] = 345; // PAE - Dawson Creek
            break;
          case ('East Okanagan'):
            $term[$key] = 346; // PAE - East Okanagan
            break;
          case ('Peace North'):
            $term[$key] = 347; // PAE - Fort St. John - Fort Nelson
            break;
          case ('East Kootenay (North)'):
            $term[$key] = 348; // PAE - Golden - Invermere
            break;
          case ('Haida Gwaii'):
            $term[$key] = 349; // PAE - Haida Gwaii
            break;
          case ('North Fraser'):
            $term[$key] = 350; // PAE Harrison Lake area
            break;
          case ('Howe Sound'):
            $term[$key] = 351; // PAE - Howe Sound
            break;
          case ('Juan De Fuca'):
            $term[$key] = 352; // PAE - Juan De Fuca
            break;
          case ('Thompson Grasslands'):
            $term[$key] = 353; // PAE - Kamloops
            break;
          case ('Kootenay Lake'):
            $term[$key] = 354; // PAE - Kootenay Lake
            break;
          case ('Lakelse Douglas Channel'):
            $term[$key] = 355; // PAE - Lakelse Douglas Channel
            break;
          case ('Liard'):
            $term[$key] = 356; // PAE - Liard
            break;
          case ('Thompson Western Mountains'):
            $term[$key] = 357; // PAE - Lillooet
            break;
          case ('Thompson Southern Rivers'):
            $term[$key] = 358; // PAE - Lytton- Ashcroft
            break;
          case ('Central Coast'):
            $term[$key] = 359; // PAE - Mainland coast- Queen Charlotte Straight
            break;
          case ('Qualicum'):
            $term[$key] = 360; // PAE - Nanaimo
            break;
          case ('Nootka'):
            $term[$key] = 361; // PAE - Nootka
            break;
          case ('North Cariboo'):
            $term[$key] = 362; // PAE - North Cariboo
            break;
          case ('North Chilcotin'):
            $term[$key] = 363; // PAE - North Chilcotin
            break;
          case ('North Coast'):
            $term[$key] = 364; // PAE - North Coast - Prince Rupert
            break;
          case ('North Okanagan'):
            $term[$key] = 365; // PAE - North Okanagan
            break;
          case ('Von Donop'):
            $term[$key] = 366; // PAE - Northern Gulf and Discovery Isl
            break;
          case ('Omineca'):
            $term[$key] = 367; // PAE - Omineca - Williston Lake
            break;
          case ('Arrowsmith'):
            $term[$key] = 368; // PAE - Parksville
            break;
          case ('Pemberton'):
            $term[$key] = 369; // PAE - Pemberton
            break;
          case ('Robson'):
            $term[$key] = 370; // PAE - Robson
            break;
          case ('Saanich/South Gulf Islands'):
            $term[$key] = 333; // PAE - Saanich/South Gulf Islands
            break;
          case ('Thompson Eastern Lakes'):
            $term[$key] = 299; // PAE - Shuswap;
            break;
          case ('Skeena Nass'):
            $term[$key] = 300; // PAE - Skeena Nass
            break;
          case ('South Cariboo'):
            $term[$key] = 301; // PAE - South Cariboo
            break;
          case ('South Chilcotin'):
            $term[$key] = 302; // PAE - South Chilcotin
            break;
          case ('South Okanagan'):
            $term[$key] = 320; // PAE - South Okanagan
            break;
          case ('East Kootenay (South)'):
            $term[$key] = 280; // PAE - East Kootenay (South)
            break;
          case ('Stikine'):
            $term[$key] = 305; // PAE - Stikine
            break;
          case ('Strathcona'):
            $term[$key] = 306; // PAE - Strathcona
            break;
          case ('Sunshine Coast'):
            $term[$key] = 307; // PAE - Sunshine Coast
            break;
          case ('Tatshenshini/Kispiox'):
            $term[$key] = 308; // PAE - Tatshenshini/Kispiox
            break;
          case ('Tweedsmuir (North)'):
            $term[$key] = 309; // PAE - Tweedsmuir (North)
            break;
          case ('Upper Fraser'):
            $term[$key] = 310; // PAE - Upper Fraser- McBride
            break;
          case ('Vancouver'):
            $term[$key] = 311; // PAE - Vancouver
            break;
          case ('Nechako'):
            $term[$key] = 312; // PAE - Vanderhoof
            break;
          case ('West Okanagan'):
            $term[$key] = 321; // PAE - West Okanagan
            break;
          case ('Whistler'):
            $term[$key] = 315; // PAE - Whistler
            break;
          default:
            $term[$key] = $area;
            break;
        }
      }
      return $term;
    } // End of ManagementArea function
*/
    // This function is called after prepareRow
    // It is used to convert the JobType ePUPs into PAE format (Application Type)
    public function PermitType($term) {
        switch($term) {
          case ('BC Hydro - Land Use/Occupancy'):
          case ('Trapline LRMP'):
          case ('Trapline'):
          case ('Land Use Occupancy'):
            $term = 253; // PAE - Land Use Occupancy
            break;
          case ('Research'):
          case ('BC Hydro - Research'):
            $term = 254; // PAE - Research
            break;
          case ('Film'):
            $term = 251; // PAE - Commercial Filming
            break;
          case ('Ecological Reserve'):
            $term = 393; // PAE - Ecological Reserve
            break;
          case ('Commercial Recreation (short term)'):
          case ('Commercial Recreation (multi year)'):
            $term = 252; // PAE - Commercial Recreation
            break;
          default:
            break;
          }
        return $term;
      } // End PermitType function

	
	  
}

